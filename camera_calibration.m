% Auto-generated by cameraCalibrator app on 04-Apr-2022
%-------------------------------------------------------


% Define images to process
imageFileNames = {'./calibration_images/MV_f2.8_100_1.jpg',...
    './calibration_images/MV_f2.8_100_24.jpg',...
    './calibration_images/MV_f2.8_100_47.jpg',...
    './calibration_images/MV_f2.8_100_70.jpg',...
    './calibration_images/MV_f2.8_100_93.jpg',...
    './calibration_images/MV_f2.8_100_116.jpg',...
    './calibration_images/MV_f2.8_100_139.jpg',...
    './calibration_images/MV_f2.8_100_162.jpg',...
    './calibration_images/MV_f2.8_100_185.jpg',...
    './calibration_images/MV_f2.8_100_208.jpg',...
    './calibration_images/MV_f2.8_100_231.jpg',...
    './calibration_images/MV_f2.8_100_254.jpg',...
    './calibration_images/MV_f2.8_100_277.jpg',...
    './calibration_images/MV_f2.8_100_300.jpg',...
    './calibration_images/MV_f2.8_100_323.jpg',...
    './calibration_images/MV_f2.8_100_346.jpg',...
    './calibration_images/MV_f2.8_100_369.jpg',...
    './calibration_images/MV_f2.8_100_392.jpg',...
    './calibration_images/MV_f2.8_100_415.jpg',...
    './calibration_images/MV_f2.8_100_438.jpg',...
    './calibration_images/MV_f2.8_100_461.jpg',...
    './calibration_images/MV_f2.8_100_484.jpg',...
    './calibration_images/MV_f2.8_100_507.jpg',...
    './calibration_images/MV_f2.8_100_530.jpg',...
    './calibration_images/MV_f2.8_100_553.jpg',...
    './calibration_images/MV_f2.8_100_576.jpg',...
};
% Detect calibration pattern in images
detector = vision.calibration.monocular.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates for the planar pattern keypoints
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
%h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
%h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
%displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);


%% apply to video
filename = 'MAH01462.MP4'; %Initializes the original video

hVideoSource = VideoReader(filename); %Reads the original video
%Initializes where to save stabilized video
a=VideoWriter('calibrated_video.avi');
%%
open(a);

%Calibration of each frame of the video using the checkerboard images
while hasFrame(hVideoSource) %While there are still frames
    raw_image = im2double(readFrame(hVideoSource));
    calibrated_image = undistortImage(raw_image, cameraParams);
    writeVideo(a, calibrated_image);
end
close(a);
